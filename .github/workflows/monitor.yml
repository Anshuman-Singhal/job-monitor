name: Monitor Job Repositories

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  monitor-repos:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up tracking directory
        run: |
          mkdir -p .tracking
          touch .tracking/jobright-ai.sha
          touch .tracking/vanshb03-issues.json
      
      - name: Check JobRight AI Repository
        id: check-jobright
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="jobright-ai/2025-Product-Management-Internship"
          LAST_SHA_FILE=".tracking/jobright-ai.sha"
          
          # First, get the default branch
          REPO_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO")
          DEFAULT_BRANCH=$(echo "$REPO_INFO" | jq -r '.default_branch // "main"')
          
          echo "Default branch: $DEFAULT_BRANCH"
          
          # Get current SHA using the default branch
          API_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/commits?sha=$DEFAULT_BRANCH&per_page=1")
          
          # Check if response is an array (success) or object (error)
          if echo "$API_RESPONSE" | jq -e 'type == "array"' > /dev/null 2>&1; then
            CURRENT_SHA=$(echo "$API_RESPONSE" | jq -r '.[0].sha // empty')
            COMMIT_MSG=$(echo "$API_RESPONSE" | jq -r '.[0].commit.message // "No message"' | head -n 1)
          else
            echo "GitHub API error or rate limit:"
            echo "$API_RESPONSE" | jq '.'
            echo "Attempting alternative method..."
            
            # Try alternative endpoint
            ALT_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/branches/$DEFAULT_BRANCH")
            CURRENT_SHA=$(echo "$ALT_RESPONSE" | jq -r '.commit.sha // empty')
            COMMIT_MSG=$(echo "$ALT_RESPONSE" | jq -r '.commit.commit.message // "No message"' | head -n 1)
          fi
          
          if [ -z "$CURRENT_SHA" ]; then
            echo "Failed to fetch current SHA"
            exit 1
          fi
          
          # Read last known SHA
          LAST_SHA=$(cat "$LAST_SHA_FILE" 2>/dev/null || echo "")
          
          echo "Current SHA: $CURRENT_SHA"
          echo "Last SHA: $LAST_SHA"
          
          if [ "$CURRENT_SHA" != "$LAST_SHA" ]; then
            # Get the diff between commits to extract new listings
            FOUND_NEW_LISTINGS=false
            
            if [ -n "$LAST_SHA" ]; then
              DIFF_URL="https://api.github.com/repos/$REPO/compare/$LAST_SHA...$CURRENT_SHA"
              DIFF_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$DIFF_URL")
              
              # Extract added lines from README
              PATCH=$(echo "$DIFF_RESPONSE" | jq -r '.files[] | select(.filename == "README.md") | .patch // empty')
              
              if [ -n "$PATCH" ]; then
                # Check if there are actual new job listings (table rows with company info)
                echo "$PATCH" | grep '^+' | grep -E '\|.*\|.*\|.*\|' | sed 's/^+//' > /tmp/new_lines.txt
                
                # Check if any of the new lines are actual job postings (not just headers or formatting)
                while IFS= read -r line; do
                  if echo "$line" | grep -qE '^\|[^|]+\|[^|]+\|[^|]+\|'; then
                    COMPANY=$(echo "$line" | cut -d'|' -f2 | xargs)
                    # Skip header rows and separator rows
                    if [ -n "$COMPANY" ] && [ "$COMPANY" != "Company" ] && [ "$COMPANY" != "---" ] && [[ ! "$COMPANY" =~ ^-+$ ]]; then
                      FOUND_NEW_LISTINGS=true
                      break
                    fi
                  fi
                done < /tmp/new_lines.txt
                
                # Format listings for Discord only if we found actual job postings
                if [ "$FOUND_NEW_LISTINGS" = true ]; then
                  LISTINGS=""
                  while IFS= read -r line; do
                    # Parse table row - assuming format: | Company | Role | Location | Link | Date |
                    if echo "$line" | grep -qE '^\|[^|]+\|[^|]+\|[^|]+\|'; then
                      COMPANY=$(echo "$line" | cut -d'|' -f2 | xargs)
                      ROLE=$(echo "$line" | cut -d'|' -f3 | xargs)
                      LOCATION=$(echo "$line" | cut -d'|' -f4 | xargs)
                      LINK=$(echo "$line" | cut -d'|' -f5 | xargs)
                      DATE=$(echo "$line" | cut -d'|' -f6 | xargs)
                      
                      # Extract URL from markdown link if present
                      if echo "$LINK" | grep -q '\[.*\](.*)'  2>/dev/null; then
                        URL=$(echo "$LINK" | sed -n 's/.*](\(.*\)).*/\1/p')
                        LINK_TEXT=$(echo "$LINK" | sed -n 's/\[\(.*\)\].*/\1/p')
                      else
                        URL=""
                        LINK_TEXT="$LINK"
                      fi
                      
                      if [ -n "$COMPANY" ] && [ "$COMPANY" != "Company" ] && [ "$COMPANY" != "---" ] && [[ ! "$COMPANY" =~ ^-+$ ]]; then
                        LISTING_ENTRY="**$COMPANY** - $ROLE\nüìç $LOCATION"
                        if [ -n "$URL" ]; then
                          LISTING_ENTRY="$LISTING_ENTRY\nüîó [Apply Here]($URL)"
                        fi
                        if [ -n "$DATE" ] && [ "$DATE" != "Date Posted" ]; then
                          LISTING_ENTRY="$LISTING_ENTRY\nüìÖ Posted: $DATE"
                        fi
                        LISTINGS="$LISTINGS\n\n$LISTING_ENTRY"
                      fi
                    fi
                  done < /tmp/new_lines.txt
                  
                  echo "listings<<EOF" >> $GITHUB_OUTPUT
                  echo -e "$LISTINGS" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT
                else
                  echo "listings=README updated but no new job listings added" >> $GITHUB_OUTPUT
                fi
              else
                echo "listings=No README changes detected" >> $GITHUB_OUTPUT
              fi
            else
              # First run - check if there are any listings at all
              FOUND_NEW_LISTINGS=true
              echo "listings=Initial tracking - monitoring started" >> $GITHUB_OUTPUT
            fi
            
            if [ "$FOUND_NEW_LISTINGS" = true ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "repo_name=JobRight AI - Product Management Internship" >> $GITHUB_OUTPUT
              echo "repo_url=https://github.com/$REPO" >> $GITHUB_OUTPUT
              echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
            
            # Always save new SHA (even if no new listings)
            echo "$CURRENT_SHA" > "$LAST_SHA_FILE"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check VanshB03 Repository Issues
        id: check-vansh-issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="vanshb03/Summer2026-Internships"
          TRACKING_FILE=".tracking/vanshb03-issues.json"
          
          # Initialize tracking file if it doesn't exist
          if [ ! -f "$TRACKING_FILE" ]; then
            echo "[]" > "$TRACKING_FILE"
          fi
          
          # Validate and fix tracking file if corrupted
          if ! jq empty "$TRACKING_FILE" 2>/dev/null; then
            echo "Tracking file corrupted, reinitializing..."
            echo "[]" > "$TRACKING_FILE"
          fi
          
          # Get list of open issues
          ISSUES_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/issues?state=open&per_page=100")
          
          # Validate API response
          if ! echo "$ISSUES_RESPONSE" | jq empty 2>/dev/null; then
            echo "Invalid API response"
            exit 1
          fi
          
          # Save current issues to temp file
          echo "$ISSUES_RESPONSE" | jq '[.[] | select(.pull_request == null)]' > /tmp/current_issues.json
          
          # Get tracked issue numbers
          TRACKED_NUMBERS=$(cat "$TRACKING_FILE" | jq -r '.[].number' | sort -n)
          CURRENT_NUMBERS=$(cat /tmp/current_issues.json | jq -r '.[].number' | sort -n)
          
          # Find new issue numbers
          NEW_NUMBERS=$(comm -13 <(echo "$TRACKED_NUMBERS") <(echo "$CURRENT_NUMBERS"))
          
          # Count new issues
          if [ -z "$NEW_NUMBERS" ]; then
            NEW_ISSUE_COUNT=0
          else
            NEW_ISSUE_COUNT=$(echo "$NEW_NUMBERS" | wc -l)
          fi
          
          echo "Found $NEW_ISSUE_COUNT new issues"
          
          if [ "$NEW_ISSUE_COUNT" -gt 0 ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "repo_name=VanshB03 - Summer 2026 Internships" >> $GITHUB_OUTPUT
            echo "repo_url=https://github.com/$REPO/issues" >> $GITHUB_OUTPUT
            
            # Format new issues for Discord
            FORMATTED_ISSUES=""
            
            # Process each new issue number
            for ISSUE_NUM in $NEW_NUMBERS; do
              # Get the specific issue data
              ISSUE=$(cat /tmp/current_issues.json | jq -r ".[] | select(.number == $ISSUE_NUM)")
              
              if [ -n "$ISSUE" ]; then
                ISSUE_TITLE=$(echo "$ISSUE" | jq -r '.title')
                ISSUE_BODY=$(echo "$ISSUE" | jq -r '.body // ""')
                ISSUE_URL=$(echo "$ISSUE" | jq -r '.html_url')
                ISSUE_NUMBER=$(echo "$ISSUE" | jq -r '.number')
                
                # Parse the issue body for internship details
                COMPANY="Unknown"
                ROLE="Unknown"
                LOCATION="Unknown"
                LINK=""
                SPONSORSHIP="Not specified"
                
                # Save issue body to temp file for easier parsing
                echo "$ISSUE_BODY" > /tmp/issue_body.txt
                
                # Extract Company Name
                if grep -q "Company Name" /tmp/issue_body.txt; then
                  COMPANY=$(grep -A1 "Company Name" /tmp/issue_body.txt | tail -n 1 | sed 's/\*\*//g' | xargs)
                fi
                
                # Extract Internship Title
                if grep -q "Internship Title" /tmp/issue_body.txt; then
                  ROLE=$(grep -A1 "Internship Title" /tmp/issue_body.txt | tail -n 1 | sed 's/\*\*//g' | xargs)
                fi
                
                # Extract Location
                if grep -q "\*\*Location\*\*" /tmp/issue_body.txt; then
                  LOCATION=$(grep -A1 "\*\*Location\*\*" /tmp/issue_body.txt | tail -n 1 | xargs)
                fi
                
                # Extract Link
                if grep -q "Link to Internship Posting" /tmp/issue_body.txt; then
                  LINK=$(grep -A2 "Link to Internship Posting" /tmp/issue_body.txt | grep -E '^https?://' | head -n 1 | xargs)
                fi
                
                # Extract Sponsorship info
                if grep -qi "sponsorship" /tmp/issue_body.txt; then
                  SPONSORSHIP=$(grep -A1 -i "sponsorship" /tmp/issue_body.txt | tail -n 1 | xargs)
                fi
                
                # Clean up extracted values
                [ "$COMPANY" = "Company Name" ] && COMPANY="Unknown"
                [ "$ROLE" = "Internship Title" ] && ROLE="Unknown"
                [ "$LOCATION" = "Location" ] && LOCATION="Unknown"
                
                # Format for Discord
                ISSUE_ENTRY="**$COMPANY** - $ROLE\nüìç $LOCATION"
                if [ -n "$LINK" ] && [ "$LINK" != "" ]; then
                  ISSUE_ENTRY="$ISSUE_ENTRY\nüîó [Apply Here]($LINK)"
                fi
                ISSUE_ENTRY="$ISSUE_ENTRY\nüé´ Sponsorship: $SPONSORSHIP"
                ISSUE_ENTRY="$ISSUE_ENTRY\nüí¨ [View Issue #$ISSUE_NUMBER]($ISSUE_URL)"
                
                if [ -z "$FORMATTED_ISSUES" ]; then
                  FORMATTED_ISSUES="$ISSUE_ENTRY"
                else
                  FORMATTED_ISSUES="$FORMATTED_ISSUES\n\n$ISSUE_ENTRY"
                fi
              fi
            done
            
            echo "listings<<EOF" >> $GITHUB_OUTPUT
            echo -e "$FORMATTED_ISSUES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Update tracking file with all current issues
            cat /tmp/current_issues.json | jq '[.[] | {number: .number, title: .title}]' > "$TRACKING_FILE"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Discord Notification for JobRight
        if: steps.check-jobright.outputs.changed == 'true'
        env:
          LISTINGS: ${{ steps.check-jobright.outputs.listings }}
        run: |
          # Prepare the Discord message with extracted listings
          if [ "$LISTINGS" != "README updated but no new job listings added" ] && [ "$LISTINGS" != "No README changes detected" ] && [ "$LISTINGS" != "Initial tracking - monitoring started" ]; then
            # Convert newlines for JSON
            FORMATTED_LISTINGS=$(echo "$LISTINGS" | sed ':a;N;$!ba;s/\n/\\n/g')
            DESCRIPTION="**New Job Postings Added:**\\n$FORMATTED_LISTINGS"
          else
            # Skip notification if no actual job listings were added
            echo "Skipping notification - no new job listings"
            exit 0
          fi
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "@everyone",
                 "embeds": [{
                   "title": "üéØ New Product Management Internships",
                   "description": "'"$DESCRIPTION"'",
                   "color": 5814783,
                   "fields": [
                     {
                       "name": "üìö Repository",
                       "value": "[View All Listings](${{ steps.check-jobright.outputs.repo_url }})",
                       "inline": true
                     },
                     {
                       "name": "üí¨ Commit",
                       "value": "${{ steps.check-jobright.outputs.commit_message }}",
                       "inline": true
                     }
                   ],
                   "footer": {
                     "text": "JobRight AI ‚Ä¢ Product Management Internships"
                   },
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
      
      - name: Send Discord Notification for VanshB03 Issues
        if: steps.check-vansh-issues.outputs.changed == 'true'
        env:
          LISTINGS: ${{ steps.check-vansh-issues.outputs.listings }}
        run: |
          # Convert newlines for JSON
          FORMATTED_LISTINGS=$(echo "$LISTINGS" | sed ':a;N;$!ba;s/\n/\\n/g')
          DESCRIPTION="**New Internship Postings (via Issues):**\\n$FORMATTED_LISTINGS"
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "@everyone",
                 "embeds": [{
                   "title": "üíº New Summer 2026 Internships",
                   "description": "'"$DESCRIPTION"'",
                   "color": 3447003,
                   "fields": [
                     {
                       "name": "üìö Repository Issues",
                       "value": "[View All Issues](${{ steps.check-vansh-issues.outputs.repo_url }})",
                       "inline": true
                     }
                   ],
                   "footer": {
                     "text": "Summer 2026 Internships ‚Ä¢ GitHub Issues Tracker"
                   },
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
      
      - name: Commit tracking files
        if: steps.check-jobright.outputs.changed == 'true' || steps.check-vansh-issues.outputs.changed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .tracking/
          git commit -m "Update tracking files" || echo "No changes to commit"
          git push || echo "No changes to push"
